# Ollama Model Updater - Requirements
# ====================================
# 
# This file contains dependencies for the Cross-Platform Ollama Model Updater.
# Most dependencies are built-in Python modules, but this file documents
# the complete environment setup for development and deployment.
#
# Compatible with Python 3.8+ (3.13.5+ recommended for best performance)
# Last updated: 2024-12-19

# ============================================================================
# CORE DEPENDENCIES (All Built-in - No Installation Required)
# ============================================================================
# 
# The Ollama Updater uses only Python standard library modules:
# - asyncio           # Async operations and concurrency control
# - subprocess        # Command execution (ollama commands)
# - sys               # System-specific parameters and functions
# - platform          # Platform identification
# - time              # Time-related functions
# - json              # JSON data handling (reports and logs)
# - argparse          # Command-line argument parsing
# - logging           # Structured logging system
# - signal            # Signal handling for graceful shutdown
# - typing            # Type hints and annotations
# - dataclasses       # Data container classes
# - pathlib           # Modern path handling
# - enum              # Enumeration support
# - re                # Regular expressions
# - datetime          # Date and time handling
# - functools         # Functional programming tools

# ============================================================================
# EXTERNAL DEPENDENCIES (None Required for Basic Operation)
# ============================================================================
#
# The script is designed to work with ONLY Python standard library modules.
# However, for enhanced development and testing, you may optionally install:

# Development and Testing Tools (Optional)
# -----------------------------------------

# Code quality and linting
# flake8>=6.0.0          # Code style checker
# black>=23.0.0          # Code formatter
# mypy>=1.0.0            # Type checker

# Testing framework
# pytest>=7.0.0          # Testing framework
# pytest-asyncio>=0.21.0 # Async testing support
# pytest-cov>=4.0.0      # Coverage reporting

# Documentation
# sphinx>=5.0.0          # Documentation generator
# sphinx-rtd-theme>=1.0.0 # Documentation theme

# ============================================================================
# SYSTEM REQUIREMENTS
# ============================================================================
#
# 1. Python Version:
#    - Minimum: Python 3.8.0
#    - Recommended: Python 3.13.5+ (for latest features and optimizations)
#
# 2. Operating System:
#    - Windows 10/11 (with Windows Subsystem for Linux optional)
#    - macOS 10.15+ (Catalina or later)
#    - Linux (Ubuntu 18.04+, CentOS 7+, or equivalent)
#
# 3. Ollama Installation:
#    - Ollama must be installed and accessible via command line
#    - Verify with: ollama --version
#    - Install from: https://ollama.com/download
#
# 4. Network Requirements:
#    - Internet connection for downloading model updates
#    - Sufficient bandwidth for large model files (GB range)
#
# 5. Disk Space:
#    - Adequate free space for model downloads and temporary files
#    - Recommend at least 10GB free space for multiple model updates

# ============================================================================
# INSTALLATION VERIFICATION
# ============================================================================
#
# To verify your environment is ready:
#
# 1. Check Python version:
#    python3 --version
#    # Should show Python 3.8.0 or higher
#
# 2. Check required modules (all should be available):
#    python3 -c "
#    import asyncio, subprocess, sys, platform, time, json, argparse
#    import logging, signal, typing, dataclasses, pathlib, enum, re
#    import datetime, functools
#    print('✅ All required modules available')
#    "
#
# 3. Check Ollama installation:
#    ollama --version
#    ollama list
#
# 4. Test the updater:
#    python3 ollama_updater_working.py --check-system

# ============================================================================
# TROUBLESHOOTING MISSING MODULES
# ============================================================================
#
# If you encounter import errors, here are solutions:
#
# Python 3.8+ Missing Modules (Unlikely but possible):
# -----------------------------------------------------
# 
# dataclasses (Python 3.7+ built-in, but just in case):
# pip install dataclasses
#
# typing (Usually built-in):
# pip install typing-extensions
#
# pathlib (Python 3.4+ built-in):
# # Should not be needed, but if missing:
# pip install pathlib2

# ============================================================================
# DEVELOPMENT SETUP (Optional)
# ============================================================================
#
# For developers who want to contribute or modify the script:

# Code Quality Tools
# ------------------
# flake8>=6.0.0
# black>=23.0.0
# isort>=5.0.0
# mypy>=1.0.0

# Testing Tools  
# -------------
# pytest>=7.0.0
# pytest-asyncio>=0.21.0
# pytest-cov>=4.0.0
# pytest-mock>=3.10.0

# Documentation Tools
# -------------------
# sphinx>=5.0.0
# sphinx-rtd-theme>=1.0.0
# myst-parser>=0.18.0

# Development Utilities
# ---------------------
# pre-commit>=3.0.0
# tox>=4.0.0
# coverage>=7.0.0

# ============================================================================
# DEPLOYMENT NOTES
# ============================================================================
#
# For Production Deployment:
# 1. No pip install required - script uses only standard library
# 2. Ensure Python 3.8+ is available on target system
# 3. Verify Ollama is installed and accessible
# 4. Copy ollama_updater_working.py to target system
# 5. Run: python3 ollama_updater_working.py --check-system
#
# For Containerized Deployment (Docker):
# FROM python:3.13-slim
# RUN curl -fsSL https://ollama.com/install.sh | sh
# COPY ollama_updater_working.py /app/
# WORKDIR /app
# CMD ["python3", "ollama_updater_working.py"]

# ============================================================================
# VERSION COMPATIBILITY MATRIX
# ============================================================================
#
# Python Version | Status | Features Available
# ---------------|---------|-------------------
# 3.8.x          | ✅ Full | All core features
# 3.9.x          | ✅ Full | All core features + enhanced type hints
# 3.10.x         | ✅ Full | All features + pattern matching support
# 3.11.x         | ✅ Full | All features + improved error messages
# 3.12.x         | ✅ Full | All features + performance improvements
# 3.13.x         | ✅ Full | All features + latest optimizations
# 3.14+          | ✅ Full | Future compatibility maintained
#
# Note: Script automatically detects Python version and adapts features accordingly

# ============================================================================
# SECURITY CONSIDERATIONS
# ============================================================================
#
# The script has minimal dependencies to reduce security attack surface:
# - Uses only Python standard library (vetted and secure)
# - No external network libraries (uses subprocess to call ollama)
# - No credential storage or transmission
# - Respects system security policies and permissions

# ============================================================================
# PERFORMANCE NOTES
# ============================================================================
#
# The script is optimized for:
# - Low memory footprint (< 50MB typically)
# - Efficient async operations for concurrent updates
# - Minimal CPU usage (I/O bound operations)
# - Scalable concurrency control
#
# Performance can be tuned with:
# --max-concurrent N    # Adjust concurrent update limit
# --timeout SECONDS     # Adjust per-model timeout

# ============================================================================
# END OF REQUIREMENTS
# ============================================================================